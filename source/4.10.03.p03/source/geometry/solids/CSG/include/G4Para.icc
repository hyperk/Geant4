//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id: G4Para.icc 83572 2014-09-01 15:23:27Z gcosmo $
//
// --------------------------------------------------------------------
// GEANT 4 inline definitions file
//
// G4Para.icc
//
// Implementation of inline methods of G4Para
// --------------------------------------------------------------------

inline
G4double G4Para::GetZHalfLength() const
{
  return fDz ;
}

inline
G4ThreeVector G4Para::GetSymAxis() const
{
  G4double cosTheta = 1.0/std::sqrt(1+fTthetaCphi*fTthetaCphi +
                               fTthetaSphi*fTthetaSphi) ;

  return G4ThreeVector(fTthetaCphi*cosTheta,
                       fTthetaSphi*cosTheta,
                       cosTheta) ;
}

inline
G4double G4Para::GetYHalfLength() const
{
  return fDy ;
}

inline
G4double G4Para::GetXHalfLength() const
{
  return fDx ;
}

inline
G4double G4Para::GetTanAlpha() const
{
  return fTalpha ;
}
    
inline
void G4Para::SetXHalfLength(G4double val)
{
  fDx= val;
  fCubicVolume= 0.;
  fSurfaceArea= 0.;
  fRebuildPolyhedron = true;
}

inline
void G4Para::SetYHalfLength(G4double val)
{
  fDy= val;
  fCubicVolume= 0.;
  fSurfaceArea= 0.;
  fRebuildPolyhedron = true;
}

inline
void G4Para::SetZHalfLength(G4double val)
{
  fDz= val;
  fCubicVolume= 0.;
  fSurfaceArea= 0.;
  fRebuildPolyhedron = true;
}

inline
void G4Para::SetAlpha(G4double alpha)
{
  fTalpha= std::tan(alpha);
  fSurfaceArea= 0.;
  fCubicVolume= 0.;
  fRebuildPolyhedron = true;
}

inline
void G4Para::SetTanAlpha(G4double val)
{
  fTalpha= val;
  fCubicVolume= 0.;
  fSurfaceArea= 0.;
  fRebuildPolyhedron = true;
}

inline
void G4Para::SetThetaAndPhi(double pTheta, double pPhi)    
{
  fTthetaCphi=std::tan(pTheta)*std::cos(pPhi);
  fTthetaSphi=std::tan(pTheta)*std::sin(pPhi);
  fCubicVolume= 0.;
  fSurfaceArea= 0.;
  fRebuildPolyhedron = true;
}

inline
G4double G4Para::GetCubicVolume()
{
  //
  // It is like G4Box, since para transformations keep the volume to be const

  if(fCubicVolume != 0.) {;}
  else   fCubicVolume = 8*fDx*fDy*fDz; 
  return fCubicVolume;
}

inline
G4double G4Para::GetSurfaceArea()
{
  if(fSurfaceArea != 0.) {;}
  else
  {  
     fSurfaceArea = 8*(fDx*fDy 
                     + fDx*fDz*std::sqrt(1+fTthetaSphi*fTthetaSphi)
                     + fDy*fDz*std::sqrt(1+fTalpha*fTalpha
                              +std::pow(fTthetaCphi-fTthetaSphi*fTalpha, 2)) );
  } 
  return fSurfaceArea;
}
