//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: QGS_BIC.icc 67969 2013-03-13 09:44:42Z gcosmo $
//
//---------------------------------------------------------------------------
//
// ClassName:   QGS_BIC
//
// Author: 2007 Gunter Folger
//     created from QGSP_BIC  by H.P.Wellisch
//
// Modified:
// 04.06.2010 G.Folger: Use new ctor for builders
// 16.08.2010 H.Kurashige: Remove inclusion of G4ParticleWithCuts 
// 16.10.2012 A.Ribon: Use new default stopping and ion physics
//
//----------------------------------------------------------------------------
//
#include <iomanip>   

#include "globals.hh"
#include "G4ios.hh"
#include "G4ProcessManager.hh"
#include "G4ProcessVector.hh"
#include "G4ParticleTypes.hh"
#include "G4ParticleTable.hh"

#include "G4Material.hh"
#include "G4MaterialTable.hh"

#include "G4DecayPhysics.hh"
#include "G4EmStandardPhysics.hh"
#include "G4EmExtraPhysics.hh"
#include "G4IonPhysics.hh"
#include "G4StoppingPhysics.hh"
#include "G4HadronElasticPhysics.hh"
#include "G4NeutronTrackingCut.hh"
//AR-31Oct2012 #include "G4NeutronCrossSectionXS.hh"

#include "G4DataQuestionaire.hh"
#include "G4HadronPhysicsQGS_BIC.hh"

#include "G4WarnPLStatus.hh"

template<class T> TQGS_BIC<T>::TQGS_BIC(G4int ver):  T()
{
  // default cut value  (1.0mm) 
  // defaultCutValue = 1.0*CLHEP::mm;

  G4DataQuestionaire it(photon);
  G4cout << "<<< Geant4 Physics List simulation engine: QGS_BIC 2.0"<<G4endl;
  G4cout <<G4endl;

  this->defaultCutValue = 0.7*CLHEP::mm;  
  this->SetVerboseLevel(ver);

  G4WarnPLStatus exp;
  exp.Experimental("QGS_BIC");

  // EM Physics
  this->RegisterPhysics( new G4EmStandardPhysics(ver) );

  // Synchroton Radiation & GN Physics
  this->RegisterPhysics( new G4EmExtraPhysics(ver) );

  // Decays
  this->RegisterPhysics( new G4DecayPhysics(ver) );

   // Hadron Elastic scattering
  this->RegisterPhysics( new G4HadronElasticPhysics(ver) );

   // Hadron Physics
  this->RegisterPhysics(  new G4HadronPhysicsQGS_BIC(ver) );

  // Stopping Physics
  this->RegisterPhysics( new G4StoppingPhysics(ver) );

  // Ion Physics
  this->RegisterPhysics( new G4IonPhysics(ver) );
  
  // Neutron tracking cut
  this->RegisterPhysics( new G4NeutronTrackingCut(ver) );

  // Neutron cross sections
  //AR-31Oct2012 this->RegisterPhysics( new G4NeutronCrossSectionXS(ver) );

}

template<class T> TQGS_BIC<T>::~TQGS_BIC()
{
}

template<class T> void TQGS_BIC<T>::SetCuts()
{
  if (this->verboseLevel >1){
    G4cout << "QGS_BIC::SetCuts:";
  }  
  //  " G4VUserPhysicsList::SetCutsWithDefault" method sets 
  //   the default cut value for all particle types 

  this->SetCutsWithDefault();   
  
//  if (this->verboseLevel >0)
//    G4VUserPhysicsList::DumpCutValuesTable();  

}

